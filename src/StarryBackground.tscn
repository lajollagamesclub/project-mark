[gd_scene load_steps=4 format=2]

[ext_resource path="res://StarryBackground.gd" type="Script" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;


uniform mat4 global_transform;

//vec3 moddy(vec3 x) {
//  return x - floor(x * (1.0 / 289.0)) * 289.0;
//}

//vec2 moddy(vec2 x) {
//  return x - floor(x * (1.0 / 289.0)) * 289.0;
//}

//vec2 moddy(vec2 x) {
//	return x - floor(x * (1.0 / 289.0)) * 289.0;
//}

vec3 moddy(vec3 x) {
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 moddy(vec2 x) {
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x) {
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) {
  return moddy(((x*34.0)+1.0)*x);
}

float snoise(vec2 v)
  {
  vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
                     -0.577350269189626,  // -1.0 + 2.0 * C.x
                      0.024390243902439); // 1.0 / 41.0
// First corner
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);

// Other corners
  vec2 i1;
  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
  //i1.y = 1.0 - i1.x;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  // x0 = x0 - 0.0 + 0.0 * C.xx ;
  // x1 = x0 - i1 + 1.0 * C.xx ;
  // x2 = x0 - 1.0 + 2.0 * C.xx ;
  vec4 x12 = vec4(x0.xy, x0.xy) + C.xxzz;
  x12.xy -= i1;

// Permutations
  i = mod289(i);
//  i = moddy(i); // Avoid truncation effects in permutation
  
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
		+ i.x + vec3(0.0, i1.x, 1.0 ));

  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;

// Gradients: 41 points uniformly over a line, mapped onto a diamond.
// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)

  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;

// Normalise gradients implicitly by scaling m
// Approximation of: m *= inversesqrt( a0*a0 + h*h );
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );

// Compute final noise value at P
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}

varying vec2 world_pos;
varying vec2 vert;
void vertex() {
	vert = VERTEX;
	world_pos = (global_transform * vec4(VERTEX, 0.0, 1.0)).xy;
}

void fragment() {
//	COLOR = vec4(0, FRAGCOORD.x/1000.0, 0, 1);
//	COLOR = vec4(0, vert.x/1000.0, 0, 1);
//	COLOR = vec4(0, world_pos.x/1000.0, 0, 1);
//	float noise = snoise(FRAGCOORD.xy/10.0);
	float noise = snoise(world_pos.xy/10.0);
	if(noise > 0.9) {
		COLOR = vec4(1, 1, 1, 1);
	} else {
		COLOR = vec4(0, 0.0, 0, 0);
	}
//	COLOR = vec4(vec3(noise), 1.0);
//	COLOR = vec4(1, 0, 0, 1.0);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/global_transform = Transform2D( 1, 0, 0, 1, 0, 0 )

[node name="StarryBackground" type="Node2D"]
material = SubResource( 2 )
script = ExtResource( 1 )
